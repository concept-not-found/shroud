{"body":"# Shroud\r\n\r\n## Shroud is a runtime object manipulation library for Java\r\n\r\n## Features\r\n\r\n - Shroud any object with a new interface, including final third-party classes!\r\n - Combine runtime objects into a single interface without having to implement the interface by hand\r\n - Object delegation/composition in a single line of code\r\n - Split monolith interfaces\r\n - AOP arounds at runtime\r\n - Remapping methods\r\n - Easy to use fluent builder\r\n\r\n## Installation\r\nShroud is a Maven project and is ready for its first release.  We are working through the process on getting the first release into the central Maven repo.  In the meantime clone down the project and `mvn install` it into your own repo.\r\n\r\n## Examples\r\n\r\n### Implement interfaces at runtime\r\n\tpublic interface Animal {\r\n\t\tString speak();\r\n\t}\r\n\tpublic class Dragon {\r\n\t\tpublic String speak() {\r\n\t\t\treturn \"rawr\";\r\n\t\t}\r\n\t}\r\n\t...\r\n\tAnimal animal = Shroud.shroud(new Dragon()).as(Animal.class);\r\n\tassertEquals(\"rawr\", animal.speak());\r\n\r\n### Bang two objects together\r\n\tpublic interface Animal {\r\n\t\tString speak();\r\n\t\tString attack();\r\n\t}\r\n\tpublic class Dragon {\r\n\t\tpublic String attack() {\r\n\t\t\treturn \"flames\";\r\n\t\t}\r\n\r\n\t}\r\n\tpublic class Kitten {\r\n\t\tpublic String speak() {\r\n\t\t\treturn \"meow\";\r\n\t\t}\r\n\t}\r\n\t...\r\n\tAnimal animal = Shroud.shroud(new Dragon(), new Kitten()).as(Animal.class);\r\n\tassertEquals(\"flames\", animal.attack());\r\n\tassertEquals(\"meow\", animal.speak());\r\n\r\n### Say fork you to any object\r\n\tpublic interface Getter {\r\n\t\tString getAnswer();\r\n\t}\r\n\tpublic interface Setter {\r\n\t\tvoid setAnswer(String answer);\r\n\t}\r\n\tpublic class Computer {\r\n\t\tprivate String answer = \"unknown\";\r\n\t\tpublic String getAnswer() {\r\n\t\t\treturn answer;\r\n\t\t}\r\n\t\tpublic void setAnswer(final String answer) {\r\n\t\t\tthis.answer = answer;\r\n\t\t}\r\n\t}\r\n\t...\r\n\tComputer computer = new Computer();\r\n\tGetter getter = Shroud.shroud(computer).as(Getter.class);\r\n\tSetter setter = Shroud.shroud(computer).as(Setter.class);\r\n\tsetter.setAnswer(\"42\");\r\n\tassertEquals(\"42\", getter.getAnswer());\r\n\r\n### Aspect-oriented programming around advice\r\n\tpublic interface Animal {\r\n\t\tString attack();\r\n\t}\r\n\tpublic class Dragon {\r\n\t\tpublic String attack() {\r\n\t\t\treturn \"flames\";\r\n\t\t}\r\n\t}\r\n\tpublic class SoundEffects {\r\n\t\tpublic Object attack(final Object target, final Method method, final Object[] parameters) throws Throwable {\r\n\t\t\treturn \"pew pew \" + method.invoke(target, parameters);\r\n\t\t}\r\n\t}\r\n\t...\r\n\tAnimal animal = Shroud.shroud(new Dragon()).advisedBy(new SoundEffects()).as(Animal.class);\r\n\tassertEquals(\"pew pew flames\", animal.attack());\r\n\r\n### Map methods from interface to implementation\r\n\tpublic interface Duck {\r\n\t\tString quack();\r\n\t}\r\n\tpublic class Dragon {\r\n\t\tpublic String speak() {\r\n\t\t\treturn \"rawr\";\r\n\t\t}\r\n\t}\r\n\t...\r\n\tDuck duck = Shroud.shroud(new Dragon()).map(\"quack\", \"speak\").as(Duck.class);\r\n\tassertEquals(\"rawr\", duck.quack());\r\n\r\n### Reverse method implementations\r\n\tpublic interface Person {\r\n\t\tString talk();\r\n\t\tString eat();\r\n\t}\r\n\tpublic class Lando {\r\n\t\tpublic String talk() {\r\n\t\t\treturn \"words\";\r\n\t\t}\r\n\t\tpublic String eat() {\r\n\t\t\treturn \"baloney\";\r\n\t\t}\r\n\t}\r\n\t...\r\n\tPerson person = Shroud.shroud(new Lando()).map(\"talk\", \"eat\").map(\"eat\", \"talk\").as(Person.class);\r\n\tassertEquals(\"baloney\", person.talk());\r\n\tassertEquals(\"words\", person.eat());\r\n\r\n##Copyright and License\r\n<pre>\r\nCopyright 2012 Ronald Chen\r\n\r\n   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   you may not use this file except in compliance with the License.\r\n   You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n   Unless required by applicable law or agreed to in writing, software\r\n   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   See the License for the specific language governing permissions and\r\n   limitations under the License.\r\n</pre>\r\n","name":"Shroud","google":"","tagline":"","note":"Don't delete this file! It's used internally to help with page regeneration."}